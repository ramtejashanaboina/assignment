import sys

# Function to find the vertex with the minimum key value, from the set of vertices not yet included in MST
def min_key(key, mst_set, V):
    min_value = sys.maxsize
    min_index = -1

    for v in range(V):
        if key[v] < min_value and not mst_set[v]:
            min_value = key[v]
            min_index = v

    return min_index

# Function to print the constructed MST stored in parent[]
def print_mst(parent, graph, V):
    print("Edge \tWeight")
    for i in range(1, V):
        print(f"{parent[i]} - {i} \t{graph[i][parent[i]]}")

# Function to construct and print MST for a graph represented using adjacency matrix representation
def prim_mst(graph, V):
    # Key values used to pick minimum weight edge in cut
    key = [sys.maxsize] * V

    # Array to store constructed MST
    parent = [-1] * V

    # To represent the set of vertices included in MST
    mst_set = [False] * V

    # Start with the first vertex (0)
    key[0] = 0

    for _ in range(V):
        # Pick the minimum key vertex from the set of vertices not yet included in MST
        u = min_key(key, mst_set, V)

        # Add the picked vertex to the MST Set
        mst_set[u] = True

        # Update the key and parent index of the adjacent vertices of the picked vertex
        for v in range(V):
            # graph[u][v] is non-zero only for adjacent vertices, mst_set[v] is false for vertices not yet included in MST
            if graph[u][v] > 0 and not mst_set[v] and key[v] > graph[u][v]:
                key[v] = graph[u][v]
                parent[v] = u

    print_mst(parent, graph, V)

# Example usage
if __name__ == "__main__":
    # Example graph as an adjacency matrix
    V = 5
    graph = [[0, 2, 0, 6, 0],
             [2, 0, 3, 8, 5],
             [0, 3, 0, 0, 7],
             [6, 8, 0, 0, 9],
             [0, 5, 7, 9, 0]]

    # Call the function to run Prim's algorithm
    prim_mst(graph, V)
